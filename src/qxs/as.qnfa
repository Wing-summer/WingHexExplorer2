<!DOCTYPE QNFA>
<QNFA language="AngelScript" extensions="as;angelscript" defaultLineMark="breakpoint">
	<embed target="Doxygen"/>
	
	<context id="comment/multi" format="comment">
		<start parenthesis="cppcomment:open" indent="1" fold="1">/\*</start>
		<stop parenthesis="cppcomment:close" indent="1" fold="1">\*/</stop>
	</context>
	
	<context id="comment/single" format="comment" >
		<start>//</start>
		<stop exclusive="false">\n</stop>
		
		<context id="evilJump" format="danger" >
			<start>\\\n</start>
			<stop exclusive="false">\n</stop>
			<escape>\\</escape>
		</context>
	</context>
	
	<context id="preprocessor" format="preprocessor" transparency="true" stayOnLine="true" >
		<start>#</start>
		<stop exclusive="false">\n</stop>
		<escape>\\</escape>
	</context>
	
	<context id="data/string" format="text" >
		<start>&quot;</start>
		<stop>&quot;</stop>
		<stop exclusive="false">\n</stop>
		<sequence id="escape" format="escapeseq" >\\[nrtvf\\"'\n]</sequence>
	</context>
	
	<context id="data/chars" format="text" >
		<start>'</start>
		<stop>'</stop>
		<stop exclusive="false">\n</stop>
		<sequence id="escape" format="escapeseq" >\\[nrtvf\\"'\n]</sequence>
	</context>
	
	<sequence parenthesis="round:open">(</sequence>
	<sequence parenthesis="round:close">)</sequence>
	<sequence parenthesis="curly:open" indent="1" fold="1">{</sequence>
	<sequence parenthesis="curly:close" indent="1" fold="1">}</sequence>
	<sequence parenthesis="square:open">\[</sequence>
	<sequence parenthesis="square:close">\]</sequence>
	
	<list id="keywords/visibility" format="keyword">
		<word parenthesis="visibility:boundary" fold="1" indent="1">public</word>
		<word parenthesis="visibility:boundary" fold="1" indent="1">protected</word>
		<word parenthesis="visibility:boundary" fold="1" indent="1">private</word>
	</list>
	
	<list id="keywords/storage" format="keyword">
		<word>const</word>
		<word>in</word>
		<word>inout</word>
		<word>out</word>
		<word>auto</word>
	</list>
	
	<list id="keywords/data" format="keyword">
		<word>void</word>
		<word>int8</word>
		<word>int16</word>
		<word>int</word>
		<word>int64</word>
		<word>uint8</word>
		<word>uint16</word>
		<word>uint</word>
		<word>uint64</word>
		<word>float</word>
		<word>double</word>
		<word>bool</word>
		<word>enum</word>
		<word>string</word>
	</list>
	
	<list id="keywords/blocks" format="keyword">
		<word>for</word>
		<word>while</word>
		<word>do</word>
		<word>if</word>
		<word>else</word>
		<word>switch</word>
		<word parenthesis="case:boundary" fold="1" indent="1" >case</word>
		<word parenthesis="case:boundary" fold="1" indent="1" >default</word>
		<word>break</word>
		<word>continue</word>
		<word>try</word>
		<word>catch</word>
		<word>throw</word>
	</list>
	
	<list id="keywords/oop" format="keyword">
		<word>abstract</word>
		<word>delete</word>
		<word>cast</word>
		<word>class</word>
		<word>final</word>
		<word>property</word>
		<word>external</word>
		<word>function</word>
		<word>interface</word>
		<word>shared</word>
		<word>this</word>
		<word>explicit</word>
		<word>override</word>
		<word>namespace</word>
		<word>get</word>
		<word>set</word>
		<word>super</word>
		<word>mixin</word>
	</list>
	
	<list id="keywords/others" format="keyword">
		<word>false</word>
		<word>true</word>
		<word>null</word>
		<word>typename</word>
		<word>return</word>
		<word>typedef</word>
		<word>funcdef</word>
		<word>from</word>
		<word>import</word>
		<word>not</word>
		<word>xor</word>
		<word>or</word>
		<word>is</word>
	</list>
	
	<list id="ansi/trigraph" format="extra-keyword">
		<prefix>\?\?</prefix>
		<word>\(</word>
		<word>\)</word>
		<word>&lt;</word>
		<word>&gt;</word>
		<word>=</word>
		<word>/</word>
		<word>&apos;</word>
		<word>!</word>
		<word>-</word>
	</list>
	
	<word id="data/float" format="numbers">-?[0-9]*.[0-9]+f?</word>
	<word id="data/hexadecimal" format="numbers">0[xX][0-9a-fA-F]+[ulUL]*</word>
	<word id="data/octal" format="numbers">0[0-7]+</word>
	<word id="data/decimal" format="numbers">-?[0-9]+[ulUL]*</word>
</QNFA>
