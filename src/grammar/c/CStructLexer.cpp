
// Generated from CStruct.g4 by ANTLR 4.13.2


#include "CStructLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CStructLexerStaticData final {
  CStructLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CStructLexerStaticData(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData(CStructLexerStaticData&&) = delete;
  CStructLexerStaticData& operator=(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData& operator=(CStructLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cstructlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CStructLexerStaticData> cstructlexerLexerStaticData = nullptr;

void cstructlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cstructlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cstructlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CStructLexerStaticData>(
    std::vector<std::string>{
      "T__0", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "AlignAs", "SizeOf", "Short", "Signed", "Struct", "Union", 
      "Unsigned", "Void", "QuestionMark", "LeftParen", "RightParen", "LeftBracket", 
      "RightBracket", "LeftBrace", "RightBrace", "LeftShift", "RightShift", 
      "Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
      "Or", "Caret", "Tilde", "Colon", "Semi", "Comma", "Identifier", "IdentifierNondigit", 
      "Nondigit", "Digit", "HexQuad", "IntegerConstant", "BinaryConstant", 
      "DecimalConstant", "OctalConstant", "HexadecimalConstant", "HexadecimalPrefix", 
      "NonzeroDigit", "OctalDigit", "HexadecimalDigit", "IntegerSuffix", 
      "UnsignedSuffix", "LongSuffix", "LongLongSuffix", "FractionalConstant", 
      "ExponentPart", "Sign", "DigitSequence", "BinaryExponentPart", "HexadecimalDigitSequence", 
      "StringLiteral", "SCharSequence", "CChar", "EscapeSequence", "SimpleEscapeSequence", 
      "OctalEscapeSequence", "HexadecimalEscapeSequence", "MultiLineMacroDefine", 
      "MultiLineMacro", "DirectiveInclude", "DirectiveDefine", "Directive", 
      "Whitespace", "Newline", "LINE_CONTINUATION", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'='", "'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", 
      "'long'", "'typedef'", "'alignas'", "'sizeof'", "'short'", "'signed'", 
      "'struct'", "'union'", "'unsigned'", "'void'", "'\\u003F'", "'('", 
      "')'", "'['", "']'", "'{'", "'}'", "'<<'", "'>>'", "'+'", "'++'", 
      "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'~'", "':'", 
      "';'", "','"
    },
    std::vector<std::string>{
      "", "", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "AlignAs", "SizeOf", "Short", "Signed", "Struct", "Union", 
      "Unsigned", "Void", "QuestionMark", "LeftParen", "RightParen", "LeftBracket", 
      "RightBracket", "LeftBrace", "RightBrace", "LeftShift", "RightShift", 
      "Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
      "Or", "Caret", "Tilde", "Colon", "Semi", "Comma", "Identifier", "IntegerConstant", 
      "StringLiteral", "MultiLineMacroDefine", "MultiLineMacro", "DirectiveInclude", 
      "DirectiveDefine", "Directive", "Whitespace", "Newline", "LINE_CONTINUATION", 
      "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,53,630,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
  	1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
  	1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
  	1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,5,40,320,
  	8,40,10,40,12,40,323,9,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,3,45,338,8,45,1,45,1,45,3,45,342,8,45,1,45,1,45,3,
  	45,346,8,45,1,45,1,45,1,45,1,45,1,45,3,45,353,8,45,1,46,1,46,1,46,4,46,
  	358,8,46,11,46,12,46,359,1,47,1,47,5,47,364,8,47,10,47,12,47,367,9,47,
  	1,48,1,48,5,48,371,8,48,10,48,12,48,374,9,48,1,49,1,49,4,49,378,8,49,
  	11,49,12,49,379,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
  	3,54,393,8,54,1,54,1,54,1,54,1,54,1,54,3,54,400,8,54,1,54,1,54,3,54,404,
  	8,54,3,54,406,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,3,57,416,8,
  	57,1,58,3,58,419,8,58,1,58,1,58,1,58,1,58,1,58,3,58,426,8,58,1,59,1,59,
  	3,59,430,8,59,1,59,1,59,1,60,1,60,1,61,4,61,437,8,61,11,61,12,61,438,
  	1,62,1,62,3,62,443,8,62,1,62,1,62,1,63,4,63,448,8,63,11,63,12,63,449,
  	1,64,1,64,3,64,454,8,64,1,64,1,64,1,65,4,65,459,8,65,11,65,12,65,460,
  	1,66,1,66,3,66,465,8,66,1,67,1,67,1,67,3,67,470,8,67,1,68,1,68,1,68,1,
  	69,1,69,1,69,3,69,478,8,69,1,69,3,69,481,8,69,1,70,1,70,1,70,1,70,4,70,
  	487,8,70,11,70,12,70,488,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
  	5,71,500,8,71,10,71,12,71,503,9,71,1,71,1,71,3,71,507,8,71,1,71,4,71,
  	510,8,71,11,71,12,71,511,1,71,4,71,515,8,71,11,71,12,71,516,1,72,1,72,
  	1,72,5,72,522,8,72,10,72,12,72,525,9,72,1,72,1,72,3,72,529,8,72,1,72,
  	4,72,532,8,72,11,72,12,72,533,1,72,4,72,537,8,72,11,72,12,72,538,1,72,
  	1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,553,8,73,
  	10,73,12,73,556,9,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,
  	567,8,74,10,74,12,74,570,9,74,1,75,1,75,1,75,5,75,575,8,75,10,75,12,75,
  	578,9,75,1,75,1,75,1,76,4,76,583,8,76,11,76,12,76,584,1,76,1,76,1,77,
  	1,77,3,77,591,8,77,1,77,3,77,594,8,77,1,77,1,77,1,78,1,78,3,78,600,8,
  	78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,610,8,79,10,79,12,79,
  	613,9,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,624,8,80,10,
  	80,12,80,627,9,80,1,80,1,80,3,501,523,611,0,81,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,0,85,0,87,0,89,0,91,42,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,
  	109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,43,131,
  	0,133,0,135,0,137,0,139,0,141,0,143,44,145,45,147,46,149,47,151,48,153,
  	49,155,50,157,51,159,52,161,53,1,0,19,3,0,65,90,95,95,97,122,1,0,48,57,
  	2,0,66,66,98,98,1,0,48,49,2,0,88,88,120,120,1,0,49,57,1,0,48,55,3,0,48,
  	57,65,70,97,102,2,0,85,85,117,117,2,0,76,76,108,108,2,0,69,69,101,101,
  	2,0,43,43,45,45,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,10,0,34,
  	34,39,39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,1,
  	0,10,10,2,0,9,9,32,32,1,0,13,13,2,0,10,10,13,13,652,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
  	47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
  	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
  	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
  	79,1,0,0,0,0,81,1,0,0,0,0,91,1,0,0,0,0,129,1,0,0,0,0,143,1,0,0,0,0,145,
  	1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,
  	1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,1,163,1,0,0,0,3,165,
  	1,0,0,0,5,170,1,0,0,0,7,176,1,0,0,0,9,183,1,0,0,0,11,188,1,0,0,0,13,194,
  	1,0,0,0,15,198,1,0,0,0,17,203,1,0,0,0,19,211,1,0,0,0,21,219,1,0,0,0,23,
  	226,1,0,0,0,25,232,1,0,0,0,27,239,1,0,0,0,29,246,1,0,0,0,31,252,1,0,0,
  	0,33,261,1,0,0,0,35,266,1,0,0,0,37,268,1,0,0,0,39,270,1,0,0,0,41,272,
  	1,0,0,0,43,274,1,0,0,0,45,276,1,0,0,0,47,278,1,0,0,0,49,280,1,0,0,0,51,
  	283,1,0,0,0,53,286,1,0,0,0,55,288,1,0,0,0,57,291,1,0,0,0,59,293,1,0,0,
  	0,61,296,1,0,0,0,63,298,1,0,0,0,65,300,1,0,0,0,67,302,1,0,0,0,69,304,
  	1,0,0,0,71,306,1,0,0,0,73,308,1,0,0,0,75,310,1,0,0,0,77,312,1,0,0,0,79,
  	314,1,0,0,0,81,316,1,0,0,0,83,324,1,0,0,0,85,326,1,0,0,0,87,328,1,0,0,
  	0,89,330,1,0,0,0,91,352,1,0,0,0,93,354,1,0,0,0,95,361,1,0,0,0,97,368,
  	1,0,0,0,99,375,1,0,0,0,101,381,1,0,0,0,103,384,1,0,0,0,105,386,1,0,0,
  	0,107,388,1,0,0,0,109,405,1,0,0,0,111,407,1,0,0,0,113,409,1,0,0,0,115,
  	415,1,0,0,0,117,425,1,0,0,0,119,427,1,0,0,0,121,433,1,0,0,0,123,436,1,
  	0,0,0,125,440,1,0,0,0,127,447,1,0,0,0,129,451,1,0,0,0,131,458,1,0,0,0,
  	133,464,1,0,0,0,135,469,1,0,0,0,137,471,1,0,0,0,139,474,1,0,0,0,141,482,
  	1,0,0,0,143,490,1,0,0,0,145,518,1,0,0,0,147,542,1,0,0,0,149,557,1,0,0,
  	0,151,571,1,0,0,0,153,582,1,0,0,0,155,593,1,0,0,0,157,597,1,0,0,0,159,
  	605,1,0,0,0,161,619,1,0,0,0,163,164,5,61,0,0,164,2,1,0,0,0,165,166,5,
  	99,0,0,166,167,5,104,0,0,167,168,5,97,0,0,168,169,5,114,0,0,169,4,1,0,
  	0,0,170,171,5,99,0,0,171,172,5,111,0,0,172,173,5,110,0,0,173,174,5,115,
  	0,0,174,175,5,116,0,0,175,6,1,0,0,0,176,177,5,100,0,0,177,178,5,111,0,
  	0,178,179,5,117,0,0,179,180,5,98,0,0,180,181,5,108,0,0,181,182,5,101,
  	0,0,182,8,1,0,0,0,183,184,5,101,0,0,184,185,5,110,0,0,185,186,5,117,0,
  	0,186,187,5,109,0,0,187,10,1,0,0,0,188,189,5,102,0,0,189,190,5,108,0,
  	0,190,191,5,111,0,0,191,192,5,97,0,0,192,193,5,116,0,0,193,12,1,0,0,0,
  	194,195,5,105,0,0,195,196,5,110,0,0,196,197,5,116,0,0,197,14,1,0,0,0,
  	198,199,5,108,0,0,199,200,5,111,0,0,200,201,5,110,0,0,201,202,5,103,0,
  	0,202,16,1,0,0,0,203,204,5,116,0,0,204,205,5,121,0,0,205,206,5,112,0,
  	0,206,207,5,101,0,0,207,208,5,100,0,0,208,209,5,101,0,0,209,210,5,102,
  	0,0,210,18,1,0,0,0,211,212,5,97,0,0,212,213,5,108,0,0,213,214,5,105,0,
  	0,214,215,5,103,0,0,215,216,5,110,0,0,216,217,5,97,0,0,217,218,5,115,
  	0,0,218,20,1,0,0,0,219,220,5,115,0,0,220,221,5,105,0,0,221,222,5,122,
  	0,0,222,223,5,101,0,0,223,224,5,111,0,0,224,225,5,102,0,0,225,22,1,0,
  	0,0,226,227,5,115,0,0,227,228,5,104,0,0,228,229,5,111,0,0,229,230,5,114,
  	0,0,230,231,5,116,0,0,231,24,1,0,0,0,232,233,5,115,0,0,233,234,5,105,
  	0,0,234,235,5,103,0,0,235,236,5,110,0,0,236,237,5,101,0,0,237,238,5,100,
  	0,0,238,26,1,0,0,0,239,240,5,115,0,0,240,241,5,116,0,0,241,242,5,114,
  	0,0,242,243,5,117,0,0,243,244,5,99,0,0,244,245,5,116,0,0,245,28,1,0,0,
  	0,246,247,5,117,0,0,247,248,5,110,0,0,248,249,5,105,0,0,249,250,5,111,
  	0,0,250,251,5,110,0,0,251,30,1,0,0,0,252,253,5,117,0,0,253,254,5,110,
  	0,0,254,255,5,115,0,0,255,256,5,105,0,0,256,257,5,103,0,0,257,258,5,110,
  	0,0,258,259,5,101,0,0,259,260,5,100,0,0,260,32,1,0,0,0,261,262,5,118,
  	0,0,262,263,5,111,0,0,263,264,5,105,0,0,264,265,5,100,0,0,265,34,1,0,
  	0,0,266,267,5,63,0,0,267,36,1,0,0,0,268,269,5,40,0,0,269,38,1,0,0,0,270,
  	271,5,41,0,0,271,40,1,0,0,0,272,273,5,91,0,0,273,42,1,0,0,0,274,275,5,
  	93,0,0,275,44,1,0,0,0,276,277,5,123,0,0,277,46,1,0,0,0,278,279,5,125,
  	0,0,279,48,1,0,0,0,280,281,5,60,0,0,281,282,5,60,0,0,282,50,1,0,0,0,283,
  	284,5,62,0,0,284,285,5,62,0,0,285,52,1,0,0,0,286,287,5,43,0,0,287,54,
  	1,0,0,0,288,289,5,43,0,0,289,290,5,43,0,0,290,56,1,0,0,0,291,292,5,45,
  	0,0,292,58,1,0,0,0,293,294,5,45,0,0,294,295,5,45,0,0,295,60,1,0,0,0,296,
  	297,5,42,0,0,297,62,1,0,0,0,298,299,5,47,0,0,299,64,1,0,0,0,300,301,5,
  	37,0,0,301,66,1,0,0,0,302,303,5,38,0,0,303,68,1,0,0,0,304,305,5,124,0,
  	0,305,70,1,0,0,0,306,307,5,94,0,0,307,72,1,0,0,0,308,309,5,126,0,0,309,
  	74,1,0,0,0,310,311,5,58,0,0,311,76,1,0,0,0,312,313,5,59,0,0,313,78,1,
  	0,0,0,314,315,5,44,0,0,315,80,1,0,0,0,316,321,3,83,41,0,317,320,3,83,
  	41,0,318,320,3,87,43,0,319,317,1,0,0,0,319,318,1,0,0,0,320,323,1,0,0,
  	0,321,319,1,0,0,0,321,322,1,0,0,0,322,82,1,0,0,0,323,321,1,0,0,0,324,
  	325,3,85,42,0,325,84,1,0,0,0,326,327,7,0,0,0,327,86,1,0,0,0,328,329,7,
  	1,0,0,329,88,1,0,0,0,330,331,3,107,53,0,331,332,3,107,53,0,332,333,3,
  	107,53,0,333,334,3,107,53,0,334,90,1,0,0,0,335,337,3,95,47,0,336,338,
  	3,109,54,0,337,336,1,0,0,0,337,338,1,0,0,0,338,353,1,0,0,0,339,341,3,
  	97,48,0,340,342,3,109,54,0,341,340,1,0,0,0,341,342,1,0,0,0,342,353,1,
  	0,0,0,343,345,3,99,49,0,344,346,3,109,54,0,345,344,1,0,0,0,345,346,1,
  	0,0,0,346,353,1,0,0,0,347,353,3,93,46,0,348,349,5,39,0,0,349,350,3,133,
  	66,0,350,351,5,39,0,0,351,353,1,0,0,0,352,335,1,0,0,0,352,339,1,0,0,0,
  	352,343,1,0,0,0,352,347,1,0,0,0,352,348,1,0,0,0,353,92,1,0,0,0,354,355,
  	5,48,0,0,355,357,7,2,0,0,356,358,7,3,0,0,357,356,1,0,0,0,358,359,1,0,
  	0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,94,1,0,0,0,361,365,3,103,51,0,
  	362,364,3,87,43,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,
  	366,1,0,0,0,366,96,1,0,0,0,367,365,1,0,0,0,368,372,5,48,0,0,369,371,3,
  	105,52,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,
  	0,0,373,98,1,0,0,0,374,372,1,0,0,0,375,377,3,101,50,0,376,378,3,107,53,
  	0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
  	100,1,0,0,0,381,382,5,48,0,0,382,383,7,4,0,0,383,102,1,0,0,0,384,385,
  	7,5,0,0,385,104,1,0,0,0,386,387,7,6,0,0,387,106,1,0,0,0,388,389,7,7,0,
  	0,389,108,1,0,0,0,390,392,3,111,55,0,391,393,3,113,56,0,392,391,1,0,0,
  	0,392,393,1,0,0,0,393,406,1,0,0,0,394,395,3,111,55,0,395,396,3,115,57,
  	0,396,406,1,0,0,0,397,399,3,113,56,0,398,400,3,111,55,0,399,398,1,0,0,
  	0,399,400,1,0,0,0,400,406,1,0,0,0,401,403,3,115,57,0,402,404,3,111,55,
  	0,403,402,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,390,1,0,0,0,405,
  	394,1,0,0,0,405,397,1,0,0,0,405,401,1,0,0,0,406,110,1,0,0,0,407,408,7,
  	8,0,0,408,112,1,0,0,0,409,410,7,9,0,0,410,114,1,0,0,0,411,412,5,108,0,
  	0,412,416,5,108,0,0,413,414,5,76,0,0,414,416,5,76,0,0,415,411,1,0,0,0,
  	415,413,1,0,0,0,416,116,1,0,0,0,417,419,3,123,61,0,418,417,1,0,0,0,418,
  	419,1,0,0,0,419,420,1,0,0,0,420,421,5,46,0,0,421,426,3,123,61,0,422,423,
  	3,123,61,0,423,424,5,46,0,0,424,426,1,0,0,0,425,418,1,0,0,0,425,422,1,
  	0,0,0,426,118,1,0,0,0,427,429,7,10,0,0,428,430,3,121,60,0,429,428,1,0,
  	0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,123,61,0,432,120,1,0,0,
  	0,433,434,7,11,0,0,434,122,1,0,0,0,435,437,3,87,43,0,436,435,1,0,0,0,
  	437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,124,1,0,0,0,440,442,
  	7,12,0,0,441,443,3,121,60,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,
  	0,0,0,444,445,3,123,61,0,445,126,1,0,0,0,446,448,3,107,53,0,447,446,1,
  	0,0,0,448,449,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,128,1,0,0,0,
  	451,453,5,34,0,0,452,454,3,131,65,0,453,452,1,0,0,0,453,454,1,0,0,0,454,
  	455,1,0,0,0,455,456,5,34,0,0,456,130,1,0,0,0,457,459,3,133,66,0,458,457,
  	1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,132,1,0,0,
  	0,462,465,8,13,0,0,463,465,3,135,67,0,464,462,1,0,0,0,464,463,1,0,0,0,
  	465,134,1,0,0,0,466,470,3,137,68,0,467,470,3,139,69,0,468,470,3,141,70,
  	0,469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,136,1,0,0,0,471,
  	472,5,92,0,0,472,473,7,14,0,0,473,138,1,0,0,0,474,475,5,92,0,0,475,477,
  	3,105,52,0,476,478,3,105,52,0,477,476,1,0,0,0,477,478,1,0,0,0,478,480,
  	1,0,0,0,479,481,3,105,52,0,480,479,1,0,0,0,480,481,1,0,0,0,481,140,1,
  	0,0,0,482,483,5,92,0,0,483,484,5,120,0,0,484,486,1,0,0,0,485,487,3,107,
  	53,0,486,485,1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,
  	489,142,1,0,0,0,490,491,5,35,0,0,491,492,5,100,0,0,492,493,5,101,0,0,
  	493,494,5,102,0,0,494,495,5,105,0,0,495,496,5,110,0,0,496,497,5,101,0,
  	0,497,509,1,0,0,0,498,500,8,15,0,0,499,498,1,0,0,0,500,503,1,0,0,0,501,
  	502,1,0,0,0,501,499,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,506,5,
  	92,0,0,505,507,5,13,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,
  	0,508,510,5,10,0,0,509,501,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,
  	512,1,0,0,0,512,514,1,0,0,0,513,515,8,15,0,0,514,513,1,0,0,0,515,516,
  	1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,144,1,0,0,0,518,519,5,35,
  	0,0,519,531,3,81,40,0,520,522,8,15,0,0,521,520,1,0,0,0,522,525,1,0,0,
  	0,523,524,1,0,0,0,523,521,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,
  	528,5,92,0,0,527,529,5,13,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,
  	1,0,0,0,530,532,5,10,0,0,531,523,1,0,0,0,532,533,1,0,0,0,533,531,1,0,
  	0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,537,8,15,0,0,536,535,1,0,0,0,
  	537,538,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,541,
  	6,72,0,0,541,146,1,0,0,0,542,543,5,35,0,0,543,544,5,105,0,0,544,545,5,
  	110,0,0,545,546,5,99,0,0,546,547,5,108,0,0,547,548,5,117,0,0,548,549,
  	5,100,0,0,549,550,5,101,0,0,550,554,1,0,0,0,551,553,8,15,0,0,552,551,
  	1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,148,1,0,0,
  	0,556,554,1,0,0,0,557,558,5,35,0,0,558,559,5,100,0,0,559,560,5,101,0,
  	0,560,561,5,102,0,0,561,562,5,105,0,0,562,563,5,110,0,0,563,564,5,101,
  	0,0,564,568,1,0,0,0,565,567,8,15,0,0,566,565,1,0,0,0,567,570,1,0,0,0,
  	568,566,1,0,0,0,568,569,1,0,0,0,569,150,1,0,0,0,570,568,1,0,0,0,571,572,
  	5,35,0,0,572,576,3,81,40,0,573,575,8,15,0,0,574,573,1,0,0,0,575,578,1,
  	0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,
  	579,580,6,75,0,0,580,152,1,0,0,0,581,583,7,16,0,0,582,581,1,0,0,0,583,
  	584,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,6,
  	76,0,0,587,154,1,0,0,0,588,590,5,13,0,0,589,591,5,10,0,0,590,589,1,0,
  	0,0,590,591,1,0,0,0,591,594,1,0,0,0,592,594,5,10,0,0,593,588,1,0,0,0,
  	593,592,1,0,0,0,594,595,1,0,0,0,595,596,6,77,0,0,596,156,1,0,0,0,597,
  	599,5,92,0,0,598,600,7,17,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,
  	1,0,0,0,601,602,5,10,0,0,602,603,1,0,0,0,603,604,6,78,0,0,604,158,1,0,
  	0,0,605,606,5,47,0,0,606,607,5,42,0,0,607,611,1,0,0,0,608,610,9,0,0,0,
  	609,608,1,0,0,0,610,613,1,0,0,0,611,612,1,0,0,0,611,609,1,0,0,0,612,614,
  	1,0,0,0,613,611,1,0,0,0,614,615,5,42,0,0,615,616,5,47,0,0,616,617,1,0,
  	0,0,617,618,6,79,0,0,618,160,1,0,0,0,619,620,5,47,0,0,620,621,5,47,0,
  	0,621,625,1,0,0,0,622,624,8,18,0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,
  	623,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,629,6,
  	80,0,0,629,162,1,0,0,0,46,0,319,321,337,341,345,352,359,365,372,379,392,
  	399,403,405,415,418,425,429,438,442,449,453,460,464,469,477,480,488,501,
  	506,511,516,523,528,533,538,554,568,576,584,590,593,599,611,625,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cstructlexerLexerStaticData = std::move(staticData);
}

}

CStructLexer::CStructLexer(CharStream *input) : Lexer(input) {
  CStructLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cstructlexerLexerStaticData->atn, cstructlexerLexerStaticData->decisionToDFA, cstructlexerLexerStaticData->sharedContextCache);
}

CStructLexer::~CStructLexer() {
  delete _interpreter;
}

std::string CStructLexer::getGrammarFileName() const {
  return "CStruct.g4";
}

const std::vector<std::string>& CStructLexer::getRuleNames() const {
  return cstructlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CStructLexer::getChannelNames() const {
  return cstructlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CStructLexer::getModeNames() const {
  return cstructlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CStructLexer::getVocabulary() const {
  return cstructlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CStructLexer::getSerializedATN() const {
  return cstructlexerLexerStaticData->serializedATN;
}

const atn::ATN& CStructLexer::getATN() const {
  return *cstructlexerLexerStaticData->atn;
}




void CStructLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cstructlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cstructlexerLexerOnceFlag, cstructlexerLexerInitialize);
#endif
}
