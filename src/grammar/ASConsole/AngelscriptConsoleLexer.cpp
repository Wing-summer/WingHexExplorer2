
// Generated from AngelscriptConsoleLexer.g4 by ANTLR 4.13.2


#include "AngelscriptConsoleLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct AngelscriptConsoleLexerStaticData final {
  AngelscriptConsoleLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AngelscriptConsoleLexerStaticData(const AngelscriptConsoleLexerStaticData&) = delete;
  AngelscriptConsoleLexerStaticData(AngelscriptConsoleLexerStaticData&&) = delete;
  AngelscriptConsoleLexerStaticData& operator=(const AngelscriptConsoleLexerStaticData&) = delete;
  AngelscriptConsoleLexerStaticData& operator=(AngelscriptConsoleLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag angelscriptconsolelexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<AngelscriptConsoleLexerStaticData> angelscriptconsolelexerLexerStaticData = nullptr;

void angelscriptconsolelexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (angelscriptconsolelexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(angelscriptconsolelexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AngelscriptConsoleLexerStaticData>(
    std::vector<std::string>{
      "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "UserDefinedLiteral", "Cast", "Int", "Int8", "Int16", "Int32", "Int64", 
      "UInt", "UInt8", "UInt16", "UInt32", "UInt64", "Float", "Double", 
      "Bool", "Auto", "Break", "Case", "Catch", "Char", "Const", "Continue", 
      "Default", "Do", "Else", "False_", "For", "If", "Nullptr", "Return", 
      "Short", "Switch", "True_", "Void", "While", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Xor", "And", "Or", "Tilde", "Not", 
      "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
      "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "Question", "Colon", 
      "Doublecolon", "Semi", "Dot", "Identifier", "Identifiernondigit", 
      "NONDIGIT", "DIGIT", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
      "BinaryLiteral", "NONZERODIGIT", "OCTALDIGIT", "HEXADECIMALDIGIT", 
      "BINARYDIGIT", "Integersuffix", "Unsignedsuffix", "Longsuffix", "Longlongsuffix", 
      "Cchar", "Escapesequence", "Simpleescapesequence", "Octalescapesequence", 
      "Hexadecimalescapesequence", "Fractionalconstant", "Exponentpart", 
      "SIGN", "Digitsequence", "Floatingsuffix", "Encodingprefix", "UserDefinedIntegerLiteral", 
      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", 
      "Udsuffix", "Whitespace", "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "'cast'", "'int'", "'int8'", "'int16'", "'int32'", 
      "'int64'", "'uint'", "'uint8'", "'uint16'", "'uint32'", "'uint64'", 
      "'float'", "'double'", "'bool'", "'auto'", "'break'", "'case'", "'catch'", 
      "'char'", "'const'", "'continue'", "'default'", "'do'", "'else'", 
      "'false'", "'for'", "'if'", "'null'", "'return'", "'short'", "'switch'", 
      "'true'", "'void'", "'while'", "'('", "')'", "'['", "']'", "'{'", 
      "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", 
      "'!'", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
      "'^='", "'&='", "'|='", "'<<='", "'>>='", "'=='", "'!='", "'<='", 
      "'>='", "'&&'", "'||'", "'++'", "'--'", "','", "'\\u003F'", "':'", 
      "'::'", "';'", "'.'"
    },
    std::vector<std::string>{
      "", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "UserDefinedLiteral", "Cast", "Int", "Int8", "Int16", "Int32", "Int64", 
      "UInt", "UInt8", "UInt16", "UInt32", "UInt64", "Float", "Double", 
      "Bool", "Auto", "Break", "Case", "Catch", "Char", "Const", "Continue", 
      "Default", "Do", "Else", "False_", "For", "If", "Nullptr", "Return", 
      "Short", "Switch", "True_", "Void", "While", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Xor", "And", "Or", "Tilde", "Not", 
      "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
      "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "Question", "Colon", 
      "Doublecolon", "Semi", "Dot", "Identifier", "DecimalLiteral", "OctalLiteral", 
      "HexadecimalLiteral", "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", 
      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", 
      "Whitespace", "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,96,897,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,1,0,1,0,3,0,240,8,0,1,0,1,0,3,0,244,8,0,1,0,1,0,3,0,
  	248,8,0,1,0,1,0,3,0,252,8,0,3,0,254,8,0,1,1,1,1,4,1,258,8,1,11,1,12,1,
  	259,1,1,1,1,1,2,1,2,3,2,266,8,2,1,2,3,2,269,8,2,1,2,1,2,1,2,3,2,274,8,
  	2,3,2,276,8,2,1,3,1,3,1,3,1,3,1,3,5,3,283,8,3,10,3,12,3,286,9,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,5,3,294,8,3,10,3,12,3,297,9,3,1,3,1,3,1,3,1,3,5,3,303,
  	8,3,10,3,12,3,306,9,3,1,3,3,3,309,8,3,1,4,1,4,1,4,1,4,3,4,315,8,4,1,5,
  	1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
  	1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
  	1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
  	1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,
  	1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,
  	1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,
  	1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,
  	1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,81,
  	1,81,1,82,1,82,1,82,5,82,621,8,82,10,82,12,82,624,9,82,1,83,1,83,1,84,
  	1,84,1,85,1,85,1,86,1,86,3,86,634,8,86,1,86,5,86,637,8,86,10,86,12,86,
  	640,9,86,1,87,1,87,3,87,644,8,87,1,87,5,87,647,8,87,10,87,12,87,650,9,
  	87,1,88,1,88,1,88,1,88,3,88,656,8,88,1,88,1,88,3,88,660,8,88,1,88,5,88,
  	663,8,88,10,88,12,88,666,9,88,1,89,1,89,1,89,1,89,3,89,672,8,89,1,89,
  	1,89,3,89,676,8,89,1,89,5,89,679,8,89,10,89,12,89,682,9,89,1,90,1,90,
  	1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,3,94,694,8,94,1,94,1,94,3,94,
  	698,8,94,1,94,1,94,3,94,702,8,94,1,94,1,94,3,94,706,8,94,3,94,708,8,94,
  	1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,97,3,97,718,8,97,1,98,1,98,3,98,
  	722,8,98,1,99,1,99,1,99,3,99,727,8,99,1,100,1,100,1,100,1,100,1,100,1,
  	100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,3,100,750,8,100,1,100,3,100,753,8,100,1,100,1,
  	100,1,100,1,100,3,100,759,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,
  	101,1,101,1,101,1,101,1,101,3,101,772,8,101,1,102,1,102,1,102,1,102,4,
  	102,778,8,102,11,102,12,102,779,1,103,3,103,783,8,103,1,103,1,103,1,103,
  	1,103,1,103,3,103,790,8,103,1,104,1,104,3,104,794,8,104,1,104,1,104,1,
  	104,3,104,799,8,104,1,104,3,104,802,8,104,1,105,1,105,1,106,1,106,3,106,
  	808,8,106,1,106,5,106,811,8,106,10,106,12,106,814,9,106,1,107,1,107,1,
  	108,1,108,1,108,3,108,821,8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,
  	109,1,109,1,109,1,109,1,109,1,109,3,109,835,8,109,1,110,1,110,3,110,839,
  	8,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,847,8,110,1,111,1,111,
  	1,111,1,112,1,112,1,112,1,113,1,113,1,114,4,114,858,8,114,11,114,12,114,
  	859,1,114,1,114,1,115,1,115,3,115,866,8,115,1,115,3,115,869,8,115,1,115,
  	1,115,1,116,1,116,1,116,1,116,5,116,877,8,116,10,116,12,116,880,9,116,
  	1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,5,117,891,8,117,
  	10,117,12,117,894,9,117,1,117,1,117,2,284,878,0,118,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
  	81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
  	52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,
  	62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,
  	72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,
  	82,165,83,167,0,169,0,171,0,173,84,175,85,177,86,179,87,181,0,183,0,185,
  	0,187,0,189,88,191,0,193,0,195,0,197,0,199,0,201,0,203,0,205,0,207,0,
  	209,0,211,0,213,0,215,0,217,0,219,89,221,90,223,91,225,92,227,0,229,93,
  	231,94,233,95,235,96,1,0,16,4,0,34,34,92,92,133,133,8232,8233,4,0,39,
  	39,92,92,133,133,8232,8233,3,0,65,90,95,95,97,122,1,0,48,57,1,0,49,57,
  	1,0,48,55,3,0,48,57,65,70,97,102,1,0,48,49,2,0,85,85,117,117,2,0,76,76,
  	108,108,4,0,10,10,13,13,39,39,92,92,2,0,43,43,45,45,4,0,70,70,76,76,102,
  	102,108,108,3,0,76,76,85,85,117,117,2,0,9,9,32,32,2,0,10,10,13,13,953,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
  	1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
  	1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,
  	1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,173,
  	1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,189,1,0,0,0,0,219,
  	1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,229,1,0,0,0,0,231,
  	1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,1,253,1,0,0,0,3,255,1,0,0,0,5,275,
  	1,0,0,0,7,308,1,0,0,0,9,314,1,0,0,0,11,316,1,0,0,0,13,321,1,0,0,0,15,
  	325,1,0,0,0,17,330,1,0,0,0,19,336,1,0,0,0,21,342,1,0,0,0,23,348,1,0,0,
  	0,25,353,1,0,0,0,27,359,1,0,0,0,29,366,1,0,0,0,31,373,1,0,0,0,33,380,
  	1,0,0,0,35,386,1,0,0,0,37,393,1,0,0,0,39,398,1,0,0,0,41,403,1,0,0,0,43,
  	409,1,0,0,0,45,414,1,0,0,0,47,420,1,0,0,0,49,425,1,0,0,0,51,431,1,0,0,
  	0,53,440,1,0,0,0,55,448,1,0,0,0,57,451,1,0,0,0,59,456,1,0,0,0,61,462,
  	1,0,0,0,63,466,1,0,0,0,65,469,1,0,0,0,67,474,1,0,0,0,69,481,1,0,0,0,71,
  	487,1,0,0,0,73,494,1,0,0,0,75,499,1,0,0,0,77,504,1,0,0,0,79,510,1,0,0,
  	0,81,512,1,0,0,0,83,514,1,0,0,0,85,516,1,0,0,0,87,518,1,0,0,0,89,520,
  	1,0,0,0,91,522,1,0,0,0,93,524,1,0,0,0,95,526,1,0,0,0,97,528,1,0,0,0,99,
  	530,1,0,0,0,101,532,1,0,0,0,103,534,1,0,0,0,105,536,1,0,0,0,107,538,1,
  	0,0,0,109,540,1,0,0,0,111,542,1,0,0,0,113,544,1,0,0,0,115,546,1,0,0,0,
  	117,548,1,0,0,0,119,551,1,0,0,0,121,554,1,0,0,0,123,557,1,0,0,0,125,560,
  	1,0,0,0,127,563,1,0,0,0,129,566,1,0,0,0,131,569,1,0,0,0,133,572,1,0,0,
  	0,135,576,1,0,0,0,137,580,1,0,0,0,139,583,1,0,0,0,141,586,1,0,0,0,143,
  	589,1,0,0,0,145,592,1,0,0,0,147,595,1,0,0,0,149,598,1,0,0,0,151,601,1,
  	0,0,0,153,604,1,0,0,0,155,606,1,0,0,0,157,608,1,0,0,0,159,610,1,0,0,0,
  	161,613,1,0,0,0,163,615,1,0,0,0,165,617,1,0,0,0,167,625,1,0,0,0,169,627,
  	1,0,0,0,171,629,1,0,0,0,173,631,1,0,0,0,175,641,1,0,0,0,177,655,1,0,0,
  	0,179,671,1,0,0,0,181,683,1,0,0,0,183,685,1,0,0,0,185,687,1,0,0,0,187,
  	689,1,0,0,0,189,707,1,0,0,0,191,709,1,0,0,0,193,711,1,0,0,0,195,717,1,
  	0,0,0,197,721,1,0,0,0,199,726,1,0,0,0,201,758,1,0,0,0,203,771,1,0,0,0,
  	205,773,1,0,0,0,207,789,1,0,0,0,209,801,1,0,0,0,211,803,1,0,0,0,213,805,
  	1,0,0,0,215,815,1,0,0,0,217,820,1,0,0,0,219,834,1,0,0,0,221,846,1,0,0,
  	0,223,848,1,0,0,0,225,851,1,0,0,0,227,854,1,0,0,0,229,857,1,0,0,0,231,
  	868,1,0,0,0,233,872,1,0,0,0,235,886,1,0,0,0,237,239,3,173,86,0,238,240,
  	3,189,94,0,239,238,1,0,0,0,239,240,1,0,0,0,240,254,1,0,0,0,241,243,3,
  	175,87,0,242,244,3,189,94,0,243,242,1,0,0,0,243,244,1,0,0,0,244,254,1,
  	0,0,0,245,247,3,177,88,0,246,248,3,189,94,0,247,246,1,0,0,0,247,248,1,
  	0,0,0,248,254,1,0,0,0,249,251,3,179,89,0,250,252,3,189,94,0,251,250,1,
  	0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,237,1,0,0,0,253,241,1,0,0,0,
  	253,245,1,0,0,0,253,249,1,0,0,0,254,2,1,0,0,0,255,257,5,39,0,0,256,258,
  	3,197,98,0,257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,
  	0,0,0,260,261,1,0,0,0,261,262,5,39,0,0,262,4,1,0,0,0,263,265,3,207,103,
  	0,264,266,3,209,104,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,
  	267,269,3,215,107,0,268,267,1,0,0,0,268,269,1,0,0,0,269,276,1,0,0,0,270,
  	271,3,213,106,0,271,273,3,209,104,0,272,274,3,215,107,0,273,272,1,0,0,
  	0,273,274,1,0,0,0,274,276,1,0,0,0,275,263,1,0,0,0,275,270,1,0,0,0,276,
  	6,1,0,0,0,277,278,5,34,0,0,278,279,5,34,0,0,279,280,5,34,0,0,280,284,
  	1,0,0,0,281,283,9,0,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,285,1,0,0,
  	0,284,282,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,5,34,0,0,288,
  	289,5,34,0,0,289,309,5,34,0,0,290,295,5,34,0,0,291,294,8,0,0,0,292,294,
  	3,199,99,0,293,291,1,0,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,
  	0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,309,5,34,0,
  	0,299,304,5,39,0,0,300,303,8,1,0,0,301,303,3,199,99,0,302,300,1,0,0,0,
  	302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,
  	1,0,0,0,306,304,1,0,0,0,307,309,5,39,0,0,308,277,1,0,0,0,308,290,1,0,
  	0,0,308,299,1,0,0,0,309,8,1,0,0,0,310,315,3,219,109,0,311,315,3,221,110,
  	0,312,315,3,223,111,0,313,315,3,225,112,0,314,310,1,0,0,0,314,311,1,0,
  	0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,10,1,0,0,0,316,317,5,99,0,0,317,
  	318,5,97,0,0,318,319,5,115,0,0,319,320,5,116,0,0,320,12,1,0,0,0,321,322,
  	5,105,0,0,322,323,5,110,0,0,323,324,5,116,0,0,324,14,1,0,0,0,325,326,
  	5,105,0,0,326,327,5,110,0,0,327,328,5,116,0,0,328,329,5,56,0,0,329,16,
  	1,0,0,0,330,331,5,105,0,0,331,332,5,110,0,0,332,333,5,116,0,0,333,334,
  	5,49,0,0,334,335,5,54,0,0,335,18,1,0,0,0,336,337,5,105,0,0,337,338,5,
  	110,0,0,338,339,5,116,0,0,339,340,5,51,0,0,340,341,5,50,0,0,341,20,1,
  	0,0,0,342,343,5,105,0,0,343,344,5,110,0,0,344,345,5,116,0,0,345,346,5,
  	54,0,0,346,347,5,52,0,0,347,22,1,0,0,0,348,349,5,117,0,0,349,350,5,105,
  	0,0,350,351,5,110,0,0,351,352,5,116,0,0,352,24,1,0,0,0,353,354,5,117,
  	0,0,354,355,5,105,0,0,355,356,5,110,0,0,356,357,5,116,0,0,357,358,5,56,
  	0,0,358,26,1,0,0,0,359,360,5,117,0,0,360,361,5,105,0,0,361,362,5,110,
  	0,0,362,363,5,116,0,0,363,364,5,49,0,0,364,365,5,54,0,0,365,28,1,0,0,
  	0,366,367,5,117,0,0,367,368,5,105,0,0,368,369,5,110,0,0,369,370,5,116,
  	0,0,370,371,5,51,0,0,371,372,5,50,0,0,372,30,1,0,0,0,373,374,5,117,0,
  	0,374,375,5,105,0,0,375,376,5,110,0,0,376,377,5,116,0,0,377,378,5,54,
  	0,0,378,379,5,52,0,0,379,32,1,0,0,0,380,381,5,102,0,0,381,382,5,108,0,
  	0,382,383,5,111,0,0,383,384,5,97,0,0,384,385,5,116,0,0,385,34,1,0,0,0,
  	386,387,5,100,0,0,387,388,5,111,0,0,388,389,5,117,0,0,389,390,5,98,0,
  	0,390,391,5,108,0,0,391,392,5,101,0,0,392,36,1,0,0,0,393,394,5,98,0,0,
  	394,395,5,111,0,0,395,396,5,111,0,0,396,397,5,108,0,0,397,38,1,0,0,0,
  	398,399,5,97,0,0,399,400,5,117,0,0,400,401,5,116,0,0,401,402,5,111,0,
  	0,402,40,1,0,0,0,403,404,5,98,0,0,404,405,5,114,0,0,405,406,5,101,0,0,
  	406,407,5,97,0,0,407,408,5,107,0,0,408,42,1,0,0,0,409,410,5,99,0,0,410,
  	411,5,97,0,0,411,412,5,115,0,0,412,413,5,101,0,0,413,44,1,0,0,0,414,415,
  	5,99,0,0,415,416,5,97,0,0,416,417,5,116,0,0,417,418,5,99,0,0,418,419,
  	5,104,0,0,419,46,1,0,0,0,420,421,5,99,0,0,421,422,5,104,0,0,422,423,5,
  	97,0,0,423,424,5,114,0,0,424,48,1,0,0,0,425,426,5,99,0,0,426,427,5,111,
  	0,0,427,428,5,110,0,0,428,429,5,115,0,0,429,430,5,116,0,0,430,50,1,0,
  	0,0,431,432,5,99,0,0,432,433,5,111,0,0,433,434,5,110,0,0,434,435,5,116,
  	0,0,435,436,5,105,0,0,436,437,5,110,0,0,437,438,5,117,0,0,438,439,5,101,
  	0,0,439,52,1,0,0,0,440,441,5,100,0,0,441,442,5,101,0,0,442,443,5,102,
  	0,0,443,444,5,97,0,0,444,445,5,117,0,0,445,446,5,108,0,0,446,447,5,116,
  	0,0,447,54,1,0,0,0,448,449,5,100,0,0,449,450,5,111,0,0,450,56,1,0,0,0,
  	451,452,5,101,0,0,452,453,5,108,0,0,453,454,5,115,0,0,454,455,5,101,0,
  	0,455,58,1,0,0,0,456,457,5,102,0,0,457,458,5,97,0,0,458,459,5,108,0,0,
  	459,460,5,115,0,0,460,461,5,101,0,0,461,60,1,0,0,0,462,463,5,102,0,0,
  	463,464,5,111,0,0,464,465,5,114,0,0,465,62,1,0,0,0,466,467,5,105,0,0,
  	467,468,5,102,0,0,468,64,1,0,0,0,469,470,5,110,0,0,470,471,5,117,0,0,
  	471,472,5,108,0,0,472,473,5,108,0,0,473,66,1,0,0,0,474,475,5,114,0,0,
  	475,476,5,101,0,0,476,477,5,116,0,0,477,478,5,117,0,0,478,479,5,114,0,
  	0,479,480,5,110,0,0,480,68,1,0,0,0,481,482,5,115,0,0,482,483,5,104,0,
  	0,483,484,5,111,0,0,484,485,5,114,0,0,485,486,5,116,0,0,486,70,1,0,0,
  	0,487,488,5,115,0,0,488,489,5,119,0,0,489,490,5,105,0,0,490,491,5,116,
  	0,0,491,492,5,99,0,0,492,493,5,104,0,0,493,72,1,0,0,0,494,495,5,116,0,
  	0,495,496,5,114,0,0,496,497,5,117,0,0,497,498,5,101,0,0,498,74,1,0,0,
  	0,499,500,5,118,0,0,500,501,5,111,0,0,501,502,5,105,0,0,502,503,5,100,
  	0,0,503,76,1,0,0,0,504,505,5,119,0,0,505,506,5,104,0,0,506,507,5,105,
  	0,0,507,508,5,108,0,0,508,509,5,101,0,0,509,78,1,0,0,0,510,511,5,40,0,
  	0,511,80,1,0,0,0,512,513,5,41,0,0,513,82,1,0,0,0,514,515,5,91,0,0,515,
  	84,1,0,0,0,516,517,5,93,0,0,517,86,1,0,0,0,518,519,5,123,0,0,519,88,1,
  	0,0,0,520,521,5,125,0,0,521,90,1,0,0,0,522,523,5,43,0,0,523,92,1,0,0,
  	0,524,525,5,45,0,0,525,94,1,0,0,0,526,527,5,42,0,0,527,96,1,0,0,0,528,
  	529,5,47,0,0,529,98,1,0,0,0,530,531,5,37,0,0,531,100,1,0,0,0,532,533,
  	5,94,0,0,533,102,1,0,0,0,534,535,5,38,0,0,535,104,1,0,0,0,536,537,5,124,
  	0,0,537,106,1,0,0,0,538,539,5,126,0,0,539,108,1,0,0,0,540,541,5,33,0,
  	0,541,110,1,0,0,0,542,543,5,61,0,0,543,112,1,0,0,0,544,545,5,60,0,0,545,
  	114,1,0,0,0,546,547,5,62,0,0,547,116,1,0,0,0,548,549,5,43,0,0,549,550,
  	5,61,0,0,550,118,1,0,0,0,551,552,5,45,0,0,552,553,5,61,0,0,553,120,1,
  	0,0,0,554,555,5,42,0,0,555,556,5,61,0,0,556,122,1,0,0,0,557,558,5,47,
  	0,0,558,559,5,61,0,0,559,124,1,0,0,0,560,561,5,37,0,0,561,562,5,61,0,
  	0,562,126,1,0,0,0,563,564,5,94,0,0,564,565,5,61,0,0,565,128,1,0,0,0,566,
  	567,5,38,0,0,567,568,5,61,0,0,568,130,1,0,0,0,569,570,5,124,0,0,570,571,
  	5,61,0,0,571,132,1,0,0,0,572,573,5,60,0,0,573,574,5,60,0,0,574,575,5,
  	61,0,0,575,134,1,0,0,0,576,577,5,62,0,0,577,578,5,62,0,0,578,579,5,61,
  	0,0,579,136,1,0,0,0,580,581,5,61,0,0,581,582,5,61,0,0,582,138,1,0,0,0,
  	583,584,5,33,0,0,584,585,5,61,0,0,585,140,1,0,0,0,586,587,5,60,0,0,587,
  	588,5,61,0,0,588,142,1,0,0,0,589,590,5,62,0,0,590,591,5,61,0,0,591,144,
  	1,0,0,0,592,593,5,38,0,0,593,594,5,38,0,0,594,146,1,0,0,0,595,596,5,124,
  	0,0,596,597,5,124,0,0,597,148,1,0,0,0,598,599,5,43,0,0,599,600,5,43,0,
  	0,600,150,1,0,0,0,601,602,5,45,0,0,602,603,5,45,0,0,603,152,1,0,0,0,604,
  	605,5,44,0,0,605,154,1,0,0,0,606,607,5,63,0,0,607,156,1,0,0,0,608,609,
  	5,58,0,0,609,158,1,0,0,0,610,611,5,58,0,0,611,612,5,58,0,0,612,160,1,
  	0,0,0,613,614,5,59,0,0,614,162,1,0,0,0,615,616,5,46,0,0,616,164,1,0,0,
  	0,617,622,3,167,83,0,618,621,3,167,83,0,619,621,3,171,85,0,620,618,1,
  	0,0,0,620,619,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,
  	623,166,1,0,0,0,624,622,1,0,0,0,625,626,3,169,84,0,626,168,1,0,0,0,627,
  	628,7,2,0,0,628,170,1,0,0,0,629,630,7,3,0,0,630,172,1,0,0,0,631,638,3,
  	181,90,0,632,634,5,39,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,
  	0,0,635,637,3,171,85,0,636,633,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,
  	0,638,639,1,0,0,0,639,174,1,0,0,0,640,638,1,0,0,0,641,648,5,48,0,0,642,
  	644,5,39,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,647,
  	3,183,91,0,646,643,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,
  	0,0,0,649,176,1,0,0,0,650,648,1,0,0,0,651,652,5,48,0,0,652,656,5,120,
  	0,0,653,654,5,48,0,0,654,656,5,88,0,0,655,651,1,0,0,0,655,653,1,0,0,0,
  	656,657,1,0,0,0,657,664,3,185,92,0,658,660,5,39,0,0,659,658,1,0,0,0,659,
  	660,1,0,0,0,660,661,1,0,0,0,661,663,3,185,92,0,662,659,1,0,0,0,663,666,
  	1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,178,1,0,0,0,666,664,1,0,0,
  	0,667,668,5,48,0,0,668,672,5,98,0,0,669,670,5,48,0,0,670,672,5,66,0,0,
  	671,667,1,0,0,0,671,669,1,0,0,0,672,673,1,0,0,0,673,680,3,187,93,0,674,
  	676,5,39,0,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,679,
  	3,187,93,0,678,675,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,
  	0,0,0,681,180,1,0,0,0,682,680,1,0,0,0,683,684,7,4,0,0,684,182,1,0,0,0,
  	685,686,7,5,0,0,686,184,1,0,0,0,687,688,7,6,0,0,688,186,1,0,0,0,689,690,
  	7,7,0,0,690,188,1,0,0,0,691,693,3,191,95,0,692,694,3,193,96,0,693,692,
  	1,0,0,0,693,694,1,0,0,0,694,708,1,0,0,0,695,697,3,191,95,0,696,698,3,
  	195,97,0,697,696,1,0,0,0,697,698,1,0,0,0,698,708,1,0,0,0,699,701,3,193,
  	96,0,700,702,3,191,95,0,701,700,1,0,0,0,701,702,1,0,0,0,702,708,1,0,0,
  	0,703,705,3,195,97,0,704,706,3,191,95,0,705,704,1,0,0,0,705,706,1,0,0,
  	0,706,708,1,0,0,0,707,691,1,0,0,0,707,695,1,0,0,0,707,699,1,0,0,0,707,
  	703,1,0,0,0,708,190,1,0,0,0,709,710,7,8,0,0,710,192,1,0,0,0,711,712,7,
  	9,0,0,712,194,1,0,0,0,713,714,5,108,0,0,714,718,5,108,0,0,715,716,5,76,
  	0,0,716,718,5,76,0,0,717,713,1,0,0,0,717,715,1,0,0,0,718,196,1,0,0,0,
  	719,722,8,10,0,0,720,722,3,199,99,0,721,719,1,0,0,0,721,720,1,0,0,0,722,
  	198,1,0,0,0,723,727,3,201,100,0,724,727,3,203,101,0,725,727,3,205,102,
  	0,726,723,1,0,0,0,726,724,1,0,0,0,726,725,1,0,0,0,727,200,1,0,0,0,728,
  	729,5,92,0,0,729,759,5,39,0,0,730,731,5,92,0,0,731,759,5,34,0,0,732,733,
  	5,92,0,0,733,759,5,63,0,0,734,735,5,92,0,0,735,759,5,92,0,0,736,737,5,
  	92,0,0,737,759,5,97,0,0,738,739,5,92,0,0,739,759,5,98,0,0,740,741,5,92,
  	0,0,741,759,5,102,0,0,742,743,5,92,0,0,743,759,5,110,0,0,744,745,5,92,
  	0,0,745,759,5,114,0,0,746,752,5,92,0,0,747,749,5,13,0,0,748,750,5,10,
  	0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,753,1,0,0,0,751,753,5,10,0,0,
  	752,747,1,0,0,0,752,751,1,0,0,0,753,759,1,0,0,0,754,755,5,92,0,0,755,
  	759,5,116,0,0,756,757,5,92,0,0,757,759,5,118,0,0,758,728,1,0,0,0,758,
  	730,1,0,0,0,758,732,1,0,0,0,758,734,1,0,0,0,758,736,1,0,0,0,758,738,1,
  	0,0,0,758,740,1,0,0,0,758,742,1,0,0,0,758,744,1,0,0,0,758,746,1,0,0,0,
  	758,754,1,0,0,0,758,756,1,0,0,0,759,202,1,0,0,0,760,761,5,92,0,0,761,
  	772,3,183,91,0,762,763,5,92,0,0,763,764,3,183,91,0,764,765,3,183,91,0,
  	765,772,1,0,0,0,766,767,5,92,0,0,767,768,3,183,91,0,768,769,3,183,91,
  	0,769,770,3,183,91,0,770,772,1,0,0,0,771,760,1,0,0,0,771,762,1,0,0,0,
  	771,766,1,0,0,0,772,204,1,0,0,0,773,774,5,92,0,0,774,775,5,120,0,0,775,
  	777,1,0,0,0,776,778,3,185,92,0,777,776,1,0,0,0,778,779,1,0,0,0,779,777,
  	1,0,0,0,779,780,1,0,0,0,780,206,1,0,0,0,781,783,3,213,106,0,782,781,1,
  	0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,5,46,0,0,785,790,3,213,
  	106,0,786,787,3,213,106,0,787,788,5,46,0,0,788,790,1,0,0,0,789,782,1,
  	0,0,0,789,786,1,0,0,0,790,208,1,0,0,0,791,793,5,101,0,0,792,794,3,211,
  	105,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,802,3,213,106,
  	0,796,798,5,69,0,0,797,799,3,211,105,0,798,797,1,0,0,0,798,799,1,0,0,
  	0,799,800,1,0,0,0,800,802,3,213,106,0,801,791,1,0,0,0,801,796,1,0,0,0,
  	802,210,1,0,0,0,803,804,7,11,0,0,804,212,1,0,0,0,805,812,3,171,85,0,806,
  	808,5,39,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,
  	3,171,85,0,810,807,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,
  	0,0,0,813,214,1,0,0,0,814,812,1,0,0,0,815,816,7,12,0,0,816,216,1,0,0,
  	0,817,818,5,117,0,0,818,821,5,56,0,0,819,821,7,13,0,0,820,817,1,0,0,0,
  	820,819,1,0,0,0,821,218,1,0,0,0,822,823,3,173,86,0,823,824,3,227,113,
  	0,824,835,1,0,0,0,825,826,3,175,87,0,826,827,3,227,113,0,827,835,1,0,
  	0,0,828,829,3,177,88,0,829,830,3,227,113,0,830,835,1,0,0,0,831,832,3,
  	179,89,0,832,833,3,227,113,0,833,835,1,0,0,0,834,822,1,0,0,0,834,825,
  	1,0,0,0,834,828,1,0,0,0,834,831,1,0,0,0,835,220,1,0,0,0,836,838,3,207,
  	103,0,837,839,3,209,104,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,1,0,
  	0,0,840,841,3,227,113,0,841,847,1,0,0,0,842,843,3,213,106,0,843,844,3,
  	209,104,0,844,845,3,227,113,0,845,847,1,0,0,0,846,836,1,0,0,0,846,842,
  	1,0,0,0,847,222,1,0,0,0,848,849,3,7,3,0,849,850,3,227,113,0,850,224,1,
  	0,0,0,851,852,3,3,1,0,852,853,3,227,113,0,853,226,1,0,0,0,854,855,3,165,
  	82,0,855,228,1,0,0,0,856,858,7,14,0,0,857,856,1,0,0,0,858,859,1,0,0,0,
  	859,857,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,6,114,0,0,862,
  	230,1,0,0,0,863,865,5,13,0,0,864,866,5,10,0,0,865,864,1,0,0,0,865,866,
  	1,0,0,0,866,869,1,0,0,0,867,869,5,10,0,0,868,863,1,0,0,0,868,867,1,0,
  	0,0,869,870,1,0,0,0,870,871,6,115,1,0,871,232,1,0,0,0,872,873,5,47,0,
  	0,873,874,5,42,0,0,874,878,1,0,0,0,875,877,9,0,0,0,876,875,1,0,0,0,877,
  	880,1,0,0,0,878,879,1,0,0,0,878,876,1,0,0,0,879,881,1,0,0,0,880,878,1,
  	0,0,0,881,882,5,42,0,0,882,883,5,47,0,0,883,884,1,0,0,0,884,885,6,116,
  	1,0,885,234,1,0,0,0,886,887,5,47,0,0,887,888,5,47,0,0,888,892,1,0,0,0,
  	889,891,8,15,0,0,890,889,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,
  	893,1,0,0,0,893,895,1,0,0,0,894,892,1,0,0,0,895,896,6,117,1,0,896,236,
  	1,0,0,0,59,0,239,243,247,251,253,259,265,268,273,275,284,293,295,302,
  	304,308,314,620,622,633,638,643,648,655,659,664,671,675,680,693,697,701,
  	705,707,717,721,726,749,752,758,771,779,782,789,793,798,801,807,812,820,
  	834,838,846,859,865,868,878,892,2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  angelscriptconsolelexerLexerStaticData = std::move(staticData);
}

}

AngelscriptConsoleLexer::AngelscriptConsoleLexer(CharStream *input) : Lexer(input) {
  AngelscriptConsoleLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *angelscriptconsolelexerLexerStaticData->atn, angelscriptconsolelexerLexerStaticData->decisionToDFA, angelscriptconsolelexerLexerStaticData->sharedContextCache);
}

AngelscriptConsoleLexer::~AngelscriptConsoleLexer() {
  delete _interpreter;
}

std::string AngelscriptConsoleLexer::getGrammarFileName() const {
  return "AngelscriptConsoleLexer.g4";
}

const std::vector<std::string>& AngelscriptConsoleLexer::getRuleNames() const {
  return angelscriptconsolelexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& AngelscriptConsoleLexer::getChannelNames() const {
  return angelscriptconsolelexerLexerStaticData->channelNames;
}

const std::vector<std::string>& AngelscriptConsoleLexer::getModeNames() const {
  return angelscriptconsolelexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& AngelscriptConsoleLexer::getVocabulary() const {
  return angelscriptconsolelexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AngelscriptConsoleLexer::getSerializedATN() const {
  return angelscriptconsolelexerLexerStaticData->serializedATN;
}

const atn::ATN& AngelscriptConsoleLexer::getATN() const {
  return *angelscriptconsolelexerLexerStaticData->atn;
}




void AngelscriptConsoleLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  angelscriptconsolelexerLexerInitialize();
#else
  ::antlr4::internal::call_once(angelscriptconsolelexerLexerOnceFlag, angelscriptconsolelexerLexerInitialize);
#endif
}
